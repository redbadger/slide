// Generated by LiveScript 1.2.0
var dom, dimensions, cssEmitter, find, minOpacity, maxOpacity, wait, waitTen, px, slice$ = [].slice, toString$ = {}.toString;
dom = require('dom');
dimensions = require('dimensions');
cssEmitter = require('css-emitter');
find = require('prelude-ls').find;
minOpacity = 0.0001;
maxOpacity = 1;
wait = curry$(function(ms, fn){
  return setTimeout(fn, ms);
});
waitTen = wait(10);
px = function(it){
  return it + "px";
};
module.exports = function(selector){
  var params, callback, open, content, wrapper, contentHeight, wrapperHeight;
  params = slice$.call(arguments, 1);
  callback = find(function(it){
    return toString$.call(it).slice(8, -1) === 'Function';
  })(
  params);
  open = find(function(it){
    return toString$.call(it).slice(8, -1) !== 'Function';
  })(
  params);
  content = dom(selector);
  wrapper = content.parent();
  contentHeight = dimensions(content[0]).outerHeight(true);
  wrapperHeight = dimensions(wrapper[0]).height();
  open = open != null
    ? !!open
    : !wrapper.hasClass('open');
  wrapper.toggleClass('open', open);
  if (open) {
    waitTen(function(){
      return wrapper.addClass('transition').css('height', px(contentHeight)).css('opacity', maxOpacity);
    });
  } else {
    waitTen(function(){
      wrapper.css('height', px(wrapperHeight)).css('opacity', maxOpacity);
      return waitTen(function(){
        return wrapper.addClass('transition').css('height', px(0)).css('opacity', minOpacity);
      });
    });
  }
  return cssEmitter(wrapper[0]).once(function(){
    wrapper.removeClass('transition').css('height', open
      ? 'auto'
      : px(0)).css('opacity', open ? maxOpacity : minOpacity);
    return typeof callback === 'function' ? callback(open) : void 8;
  });
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}